#Perform this lab as part of Docker Swarm Traefik Ingress Controller Lab.
---
  - name: Install Docker and Configure Docker Swarm
    hosts: docker_servers
    become: yes
    become_user: root
    - name: Install Docker on all hosts
    hosts: all
    become: true
    tasks:
    - name: Install required packages
      apt:
        name: [apt-transport-https, ca-certificates, curl, gnupg, lsb-release]
        state: present
        update_cache: yes

    - name: Add Docker's official GPG key
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present

    - name: Add Docker repository
      apt_repository:
        repo: "deb [arch=amd64] https://download.docker.com/linux/ubuntu {{ ansible_distribution_release }} stable"
        state: present

    - name: Install Docker
      apt:
        name: docker-ce
        state: latest
        update_cache: yes

    - name: Ensure Docker is running
      service:
        name: docker
        state: started
        enabled: true

    tasks:
      - name: Install Docker Engine On All Hosts If Not Exists
        block:
        - name: Check Docker Version
          shell: docker version
          when: ansible_distribution == 'Ubuntu' and ansible_distribution_version == '24.04'    

        rescue:
        - name: Install Docker on all docker_servers
          shell: curl https://get.docker.com | bash
          when: ansible_distribution == 'Ubuntu' and ansible_distribution_version == '24.04'    

        always:
        - name: Check Docker Version
          shell: docker version
          ignore_errors: yes
    tags:
     - install

  - name: Enable Docker Swarm
    hosts: docker_master
    become: yes
    become_user: root
    tasks:
      - name: Enable Docker Swarm on Master docker_servers
        shell: docker swarm init
        ignore_errors: yes
      - name: Get Docker Worker Token
        shell: docker swarm join-token -q worker
        register: token
        no_log: true
      - set_fact:
           swarm_token: "{{ token.stdout }}"
        no_log: true
      - debug:
          var: token.stdout
        no_log: true
      - name: Get Docker Manager Token
        shell: docker swarm join-token -q manager
        register: managertoken
        no_log: true
      - set_fact:
           swarmmanager_token: "{{ managertoken.stdout }}"
        no_log: true
      - debug:
          var: swarmmanager_token.stdout
        no_log: true
      - name: Get Docker Master Private IP
        shell: curl http://169.254.169.254/latest/meta-data/local-ipv4/
        register: private_ip
      - set_fact:
           swarm_ip: "{{ private_ip.stdout }}"
      - debug:
          var: private_ip.stdout
      - name: Export swarm_token using add_host
        add_host:
         name: "docker_master_node_token"
         shared_variable:  "{{ swarm_token }}"
      - name: Export swarm_ip using add_host
        add_host:
         name: "docker_master_node_ip"
         shared_variable:  "{{ swarm_ip }}"
      - name: Export swarmmanager_token using add_host
        add_host:
         name: "docker_master_managernode_token"
         shared_variable:  "{{ swarmmanager_token }}"

    tags:
     - swarm

  - name: Add Workers to Swarm
    hosts: docker_workers
    become: yes
    become_user: root
    vars:
      private_ip: "{{ hostvars['docker_master_node_ip']['shared_variable'] }}"
      token: "{{ hostvars['docker_master_node_token']['shared_variable'] }}"
    tasks:
      - debug:
          var: token
        no_log: true
      - debug:
          var: private_ip
      - name: Add Workers to Swarm
        shell: docker swarm join --token "{{ token }}" "{{ private_ip }}":2377
        ignore_errors: yes
    tags:
     - workers

  - name: Add Managers to Swarm
    hosts: docker_managers
    become: yes
    become_user: root
    vars:
      private_ip: "{{ hostvars['docker_master_node_ip']['shared_variable'] }}"
      token: "{{ hostvars['docker_master_managernode_token']['shared_variable'] }}"
    tasks:
      - debug:
          var: token
        no_log: true
      - debug:
          var: private_ip
      - name: Add Managers to Swarm
        shell: docker swarm join --token "{{ token }}" "{{ private_ip }}":2377
        ignore_errors: yes
    tags:
     - managers

  - name: Deploy Docker Swarm Visualizer
    hosts: docker_master
    become: yes
    become_user: root
    vars:
      private_ip: "{{ hostvars['docker_master_node_ip']['shared_variable'] }}"
      token: "{{ hostvars['docker_master_managernode_token']['shared_variable'] }}"
    tasks:
      - debug:
          var: token
        no_log: true
      - debug:
          var: private_ip
      - name: Deploy Docker Swarm Visualizer Service On Master
        shell: >
          docker service create --name=viz --publish=8080:8080/tcp 
          --constraint=node.role==manager 
          --mount=type=bind,src=/var/run/docker.sock,dst=/var/run/docker.sock 
          dockersamples/visualizer

  - name: Deploy Test Application
    hosts: docker_master
    become: yes
    become_user: root
    vars:
      private_ip: "{{ hostvars['docker_master_node_ip']['shared_variable'] }}"
      token: "{{ hostvars['docker_master_managernode_token']['shared_variable'] }}"
    tasks:
      - debug:
          var: token
        no_log: true
      - debug:
          var: private_ip
      - name: Delete Docker Service nginx001 If Exists
        shell: docker service rm nginx001 
        ignore_errors: yes
      - name: Delete Docker Service flask If Exists
        shell: docker service rm flask 
        ignore_errors: yes
      - name: Deploy Sample Application
        shell: docker service create --name nginx001 -p 8000:80 --replicas 1 sreeharshav/testcontainer:v1
        ignore_errors: yes
      - name: Deploy Sample Flask Application
        shell: docker service create --name flask -p 5000:5000 --replicas 1 sreeharshav/flask:v1
        ignore_errors: yes
      - name: Validate Deployment Nginx
        shell: sleep 10 && curl http://"{{ private_ip.stdout }}":8000
        register: html
        ignore_errors: yes
      - name: Validate Deployment Flask
        shell: sleep 10 && curl http://"{{ private_ip.stdout }}":5000
        register: html
        ignore_errors: yes
      - debug:
         var: html.stdout
    tags:
     - managers